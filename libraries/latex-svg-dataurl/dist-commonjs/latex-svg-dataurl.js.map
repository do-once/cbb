{"version":3,"file":"latex-svg-dataurl.js","sourceRoot":"","sources":["../src/latex-svg-dataurl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author GuangHui\n * @description 输入 latex 字符串,输出 svg dataurl ,此 dataurl 可供 canvas 消费\n */\n\ndeclare global {\n  var MathJax: any\n}\n\nexport type TransformLatexToSVGDataUrlParams = {\n  latex: string /** latex输入字符串 */\n  retryInterval?: number /** 渲染失败的重试间隔,默认500ms */\n  retryMaxCount?: number /** 渲染重试次数,默认10次 */\n  outputType: 'dataUrl' | 'svgStr' | 'both' /** 输出类型,dataurl svgel 转换的string 或 都输出;默认 dataurl*/\n}\n\nexport type TransformLatexToSVGDataUrlRet =\n  | string\n  | {\n      dataUrl: string\n      svgStr: string\n    }\n\n/**\n * 将 latex 公式转为 svg dataurl\n *\n * @date 2023-03-28 19:27:07\n * @export\n * @param latex latex 公式字符串\n * @param retryInterval 重试间隔 默认500ms\n * @param retryMaxCount 重试最大次数 默认10\n * @returns {Promise<TransformLatexToSVGDataUrlRet>} svg dataurl\n */\nexport function transformLatexToSVGDataUrl(\n  {\n    latex,\n    retryInterval = 500,\n    retryMaxCount = 10,\n    outputType = 'dataurl'\n  } = {} as TransformLatexToSVGDataUrlParams\n): Promise<TransformLatexToSVGDataUrlRet> {\n  if (!window.MathJax) throw new Error('window.MathJax can not access')\n\n  const renderContainer = createRenderContainer()\n  const scriptElWithLatex = createScriptElWithLatex(latex)\n\n  renderContainer.appendChild(scriptElWithLatex)\n  document.body.appendChild(renderContainer)\n\n  return new Promise((resolve, reject) => {\n    window.MathJax.Hub.Process(scriptElWithLatex, () => {\n      /** Mathjax 处理后,会生成一个 span 元素,其 id 为script.id + `-Frame` */\n      /** 此 frame 包含生成后的 svg,此 svg通过 use 使用了MathJax_SVG_glyphs中的 def */\n      /** 生成 dataurl 需要将 MathJax_SVG_glyphs中的 def 拷贝到 frame 下进行生成*/\n      const mathjaxFrameId = `#${scriptElWithLatex.id}-Frame`\n\n      let retryCount = 0\n      let timer: number\n\n      function display() {\n        try {\n          if (retryCount >= retryMaxCount) {\n            reject(`超过重试次数:${retryMaxCount}`)\n            return\n          }\n\n          const frame = document.querySelector(mathjaxFrameId)\n\n          if (!frame) throw new Error(`${mathjaxFrameId} element dont exist`)\n\n          const svg = cloneGlobalSvgDefsIntoSvg(frame)\n\n          if (outputType === 'dataurl') {\n            resolve(transformSvgEl2DataUrl(svg))\n          } else if (outputType === 'svgstring') {\n            resolve(new XMLSerializer().serializeToString(svg))\n          } else {\n            resolve({\n              dataUrl: transformSvgEl2DataUrl(svg),\n              svgStr: new XMLSerializer().serializeToString(svg)\n            })\n          }\n        } catch (error) {\n          console.log('error :>> ', error)\n          retryCount++\n\n          clearTimeout(timer)\n          timer = setTimeout(() => {\n            display()\n          }, retryInterval)\n        }\n      }\n\n      display()\n    })\n  })\n}\n\n/**\n * 将 svg 元素内容转为 dataurl\n *\n * @date 2023-03-28 17:34:57\n * @export\n * @param svgEl\n * @returns {string} dataurl\n */\nexport function transformSvgEl2DataUrl(svgEl: SVGElement) {\n  return (\n    'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(new XMLSerializer().serializeToString(svgEl))\n  )\n}\n\n/**\n * 将 mathjax 生成的 svg defs拷贝到 mathjaxFrame 的 svg 下\n *\n * @date 2023-03-28 17:35:38\n * @param mathjaxFrame\n * @returns {SVGElement} mathjaxFrame 的 svg\n */\nfunction cloneGlobalSvgDefsIntoSvg(mathjaxFrame: Element): SVGElement {\n  /** 找到 frame 下的 svg */\n  const svg = mathjaxFrame.querySelector('svg') as SVGElement\n\n  /** 找到 svg 里包含的 use元素,并获取其 href */\n  const useEls = svg.querySelectorAll('use')\n  if (!useEls || !useEls.length) return svg\n\n  const useElHrefs = Array.from(useEls)\n    .map(useEl => {\n      return useEl.getAttribute('href') as string\n    })\n    .filter(href => !!href)\n\n  /** 根据 href 在mathjax svg def中进行查找.若有,则拷贝到新建的 svgDef 中 */\n  var mathJaxGlobalDef = document.querySelector('#MathJax_SVG_glyphs')\n\n  const svgDef = document.createElement('def')\n  svgDef.id = `CanvasLatexSvgDef_${mathjaxFrame.id}`\n\n  useElHrefs.forEach(href => {\n    if (mathJaxGlobalDef?.querySelector(href)) {\n      svgDef.appendChild(mathJaxGlobalDef.querySelector(href)?.cloneNode(true)!)\n    }\n  })\n\n  svg.appendChild(svgDef)\n\n  return svg\n}\n\n/**\n * 创建 renderContainer\n *\n * @date 2023-03-28 17:36:27\n * @returns {HTMLDivElement} renderContainer\n */\nfunction createRenderContainer() {\n  const div = document.createElement('div')\n\n  const renderContainerId = `CanvasLatexRenderContainer_${new Date().getTime()}`\n  div.id = renderContainerId\n\n  div.style.display = 'none'\n  div.style.visibility = 'hidden'\n  div.style.position = 'absolute'\n  div.style.left = '-1000px'\n\n  return div\n}\n\n/**\n * 创建包含 latex 的 script\n *\n * @date 2023-03-28 17:37:00\n * @param latex\n * @returns {HTMLScriptElement} scriptEl\n */\nfunction createScriptElWithLatex(latex: string) {\n  let script = document.createElement('script')\n\n  const canvasLatexLatexScriptId = `CanvasLatexLatexScript_${new Date().getTime()}`\n  script.id = canvasLatexLatexScriptId\n\n  script.type = 'math/tex'\n  script.innerHTML = latex\n\n  return script\n}\n"]}