{"version":3,"file":"DoonceHtmlParser.js","sourceRoot":"","sources":["../src/DoonceHtmlParser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author GuangHui\n * @description DoonceHtmlParser 主体程序\n */\n\n/** <         div       id=\"app\"      >           hello   <           /                   div             >           */\n/** TAG_OPEN  TAG_NAME  TAG_ATTR_TEXT TAG_CLOSE   TEXT    TAG_OPEN    TAG_SELF_CLOSEING   POST_TAG_NAME   TAG_CLOSE   */\nexport type State =\n  | 'START' /** 初始状态 */\n  | 'TAG_OPEN' /** 标签开头< */\n  | 'TAG_NAME' /** 标签名 */\n  | 'TAG_ATTR_TEXT' /** 属性文本 */\n  | 'TAG_SELF_CLOSEING' /** 结束标签中的/ */\n  | 'POST_TAG_NAME' /** 结束标签名 */\n  | 'TAG_CLOSE' /** 标签结尾> */\n  | 'TEXT' /** 标签内容 */\n  | 'COMMENT' /** 注释信息 */\n\nexport interface IToken {\n  type: State\n  startIndex: number /** 相对输入字符串的开始索引位置 */\n  content: string /** 内容 */\n}\n\nexport interface IAstNode {\n  nodeType: 'ELEMENT' | 'COMMENT' | 'TEXT' | 'ROOT'\n  nodeName: string\n  content: string\n  attrText: string\n  attrObj: Record<string, unknown>\n  children: IAstNode[]\n}\n\nexport class DoonceHtmlParser {\n  static State: Record<State, State> = {\n    START: 'START',\n    TAG_OPEN: 'TAG_OPEN',\n    TAG_NAME: 'TAG_NAME',\n    TAG_ATTR_TEXT: 'TAG_ATTR_TEXT',\n    TAG_SELF_CLOSEING: 'TAG_SELF_CLOSEING',\n    POST_TAG_NAME: 'POST_TAG_NAME',\n    TAG_CLOSE: 'TAG_CLOSE',\n    TEXT: 'TEXT',\n    COMMENT: 'COMMENT'\n  }\n\n  debug: boolean\n\n  constructor({ debug } = {} as { debug?: boolean }) {\n    this.debug = !!debug\n  }\n\n  /**\n   * 解析输入的 html 字符串,返回 tokenList\n   *\n   * @date 2023-07-25 19:46:40\n   * @param input\n   * @returns {IToken[]} tokenList\n   * @memberof DoonceHtmlParser\n   */\n  parse(input: string): IToken[] {\n    if (!input || typeof input !== 'string') throw new Error('Input string is need provided')\n\n    const tokenList: IToken[] = []\n    let curState: State = DoonceHtmlParser.State.START\n    let curChar = ''\n    let curCharIndex = 0\n\n    while ((curChar = input[curCharIndex])) {\n      this.debug && console.log('-------------------------')\n      this.debug && console.log('before :>> ', curState, curCharIndex, curChar)\n\n      switch (curState) {\n        case DoonceHtmlParser.State.START:\n          if (curChar === '<') {\n            curState = DoonceHtmlParser.State.TAG_OPEN\n          } else {\n            curState = DoonceHtmlParser.State.TEXT\n\n            /** 初始化 text Token,开始收集 text */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_OPEN:\n          if (isLetter(curChar)) {\n            curState = DoonceHtmlParser.State.TAG_NAME\n\n            /** 初始化 tagName Token,开始收集 tagName */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else if (curChar === '/') {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else if (curChar === '!') {\n            curState = DoonceHtmlParser.State.COMMENT\n\n            /** 初始化 comment Token,开始收集 comment */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_NAME:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else if (isWhiteSpace(curChar) && input[curCharIndex + 1] !== '/') {\n            curState = DoonceHtmlParser.State.TAG_ATTR_TEXT\n\n            /** 初始化 tagAttrText Token,开始收集 tagAttrText */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else if (\n            /** 兼容类似<br/>情况 */\n            curChar === '/' ||\n            /** 兼容类似<br />情况 */\n            (isWhiteSpace(curChar) && input[curCharIndex + 1] === '/')\n          ) {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else {\n            /** 收集 tagName */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_TEXT:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else if (\n            /** 当前为/后面为>或空格*/\n            curChar === '/' &&\n            (input[curCharIndex + 1] === '>' || isWhiteSpace(input[curCharIndex + 1]))\n          ) {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else {\n            /** 收集 tagAttrText */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_SELF_CLOSEING:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n\n            /** 兼容自闭合标签场景,添加一个与最后 tagName 对应的selfCloseing 对象 */\n            const lastMatchedTagNameObj = this._findLastMatchedTagNameObj(tokenList)\n            if (lastMatchedTagNameObj && lastMatchedTagNameObj.content) {\n              tokenList.push({\n                type: DoonceHtmlParser.State.TAG_SELF_CLOSEING,\n                content: lastMatchedTagNameObj.content,\n                startIndex: curCharIndex\n              })\n            }\n          } else if (isLetter(curChar)) {\n            curState = DoonceHtmlParser.State.POST_TAG_NAME\n\n            /** 初始化 postTagName Token,开始收集 postTagName */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.POST_TAG_NAME:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else {\n            /** 收集postTagName */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_CLOSE:\n          if (curChar === '<') {\n            curState = DoonceHtmlParser.State.TAG_OPEN\n          } else if (curChar) {\n            curState = DoonceHtmlParser.State.TEXT\n\n            /** 初始化 text Token,开始收集 text */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.COMMENT:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else {\n            /** 收集 comment */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TEXT:\n          if (\n            /** 当前为< && 后续字符中有 > && <到首个>之间无其它<,则进入 TAG_OPEN 状态 */\n            curChar === '<' &&\n            this._hasLessThanSymbolBetweenStartIndexAndFirstGreatThanSymbolIndex(input, curCharIndex)\n          ) {\n            curState = DoonceHtmlParser.State.TAG_OPEN\n          } else {\n            /** 收集 text */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n      }\n\n      this.debug && console.log('after :>> ', curState)\n\n      curCharIndex++\n    }\n\n    this.debug && console.log('normalize before input :>> ', input)\n    this.debug && console.log('normalize after tokenList :>> ', tokenList)\n\n    return tokenList\n  }\n\n  /**\n   * 将 tokenList 解析为 ast\n   *\n   * @date 2023-07-25 19:45:49\n   * @private\n   * @param tokenList\n   * @returns {IAstNode} ast对象\n   * @memberof DoonceHtmlParser\n   */\n  parseTokenListToAst(tokenList: IToken[]) {\n    const nodeStack: IAstNode[] = [\n      {\n        nodeType: 'ROOT',\n        nodeName: '',\n        content: '',\n        attrText: '',\n        attrObj: {},\n        children: []\n      }\n    ]\n\n    for (let i = 0; i < tokenList.length; i++) {\n      const { type, content } = tokenList[i]\n\n      if (type === DoonceHtmlParser.State.TAG_NAME) {\n        nodeStack.push({\n          nodeType: 'ELEMENT',\n          nodeName: content,\n          content: '',\n          attrText: '',\n          attrObj: {},\n          children: []\n        })\n      } else if (type === DoonceHtmlParser.State.TEXT) {\n        nodeStack[nodeStack.length - 1].children.push({\n          nodeType: 'TEXT',\n          nodeName: '',\n          content,\n          attrText: '',\n          attrObj: {},\n          children: []\n        })\n      } else if (type === DoonceHtmlParser.State.TAG_ATTR_TEXT) {\n        const node = nodeStack[nodeStack.length - 1]\n        node.attrText = content\n\n        node.attrObj = parseAttrTextToObj(content)\n      } else if (type === DoonceHtmlParser.State.COMMENT) {\n        nodeStack[nodeStack.length - 1].children.push({\n          nodeType: 'COMMENT',\n          nodeName: '',\n          content,\n          attrText: '',\n          attrObj: {},\n          children: []\n        })\n      } else if (\n        type === DoonceHtmlParser.State.POST_TAG_NAME ||\n        type === DoonceHtmlParser.State.TAG_SELF_CLOSEING\n      ) {\n        if (content === nodeStack[nodeStack.length - 1].nodeName) {\n          const obj = nodeStack.pop()\n\n          obj && nodeStack[nodeStack.length - 1].children.push(obj)\n        }\n      } else {\n        // ! should never access\n        this.debug && console.warn('should never access')\n      }\n    }\n\n    this.debug && console.log('nodeStack :>> ', JSON.stringify(nodeStack, null, 2))\n\n    return nodeStack[0]\n  }\n\n  /**\n   * 找到 tokenList 中最后一个 TAG_NAME 对象\n   *\n   * @date 2023-07-25 19:40:18\n   * @private\n   * @param tokenList\n   * @returns {IToken} TAG_NAME 对象\n   * @memberof DoonceHtmlParser\n   */\n  private _findLastMatchedTagNameObj(tokenList: IToken[]) {\n    return tokenList\n      .slice()\n      .reverse()\n      .find(token => token.type === DoonceHtmlParser.State.TAG_NAME)\n  }\n  /**\n   * 给定字符串,从给定位置到首个>符号之前,是否存在<符号\n   *\n   * @date 2023-07-09 01:22:43\n   * @private\n   * @param input 输入字符串\n   * @param startIndex <字符起始索引\n   * @returns {boolean} 是否从 TEXT 转换为 TAG_OPEN 状态\n   * @memberof DoonceHtmlParser\n   */\n  private _hasLessThanSymbolBetweenStartIndexAndFirstGreatThanSymbolIndex(input: string, startIndex: number) {\n    const afterStartIndexStr = input.slice(startIndex + 1)\n    const firstGreatThanSymbolIndex = afterStartIndexStr.indexOf('>')\n\n    if (firstGreatThanSymbolIndex === -1) return false\n\n    return afterStartIndexStr.slice(0, firstGreatThanSymbolIndex).indexOf('<') === -1\n  }\n}\n\n/**\n * 将 attrText 解析为对象\n *\n * @date 2023-07-26 10:08:25\n * @export\n * @param attrText\n * @returns {Record<string,string>}\n */\nexport function parseAttrTextToObj(attrText: string): Record<string, string> {\n  if (typeof attrText !== 'string') return {}\n\n  const attributeRegex = /(\\S+)=[\"']?([^\"'\\s]+(?:\\s+[^\"'\\s]+)*)[\"']?/g\n  const attributes: Record<string, string> = {}\n\n  let match\n  while ((match = attributeRegex.exec(attrText)) !== null) {\n    const attributeName = match[1]\n    const attributeValue = match[2]\n\n    attributes[attributeName] = attributeValue\n  }\n\n  return attributes\n}\n\n/**\n * 提取 htmlComment 中的内容\n *\n * @date 2023-07-09 04:30:03\n * @export\n * @param htmlComment html 注释\n * @returns {string} 内容\n */\nexport function extractHtmlCommentContent(htmlComment: string) {\n  const reg = /!--(.+?)--/\n\n  if (!reg.test(htmlComment)) return htmlComment\n\n  return htmlComment.match(reg)![1]\n}\n\n/**\n * 是否英文字母\n *\n * @date 2023-07-09 01:19:52\n * @export\n * @param char\n * @returns {boolean} 是否英文字母\n */\nexport function isLetter(char: string) {\n  return /^[a-zA-Z]$/.test(char)\n}\n\n/**\n * 是否空白字符\n *\n * @date 2023-07-09 01:19:23\n * @export\n * @param char\n * @returns {boolean} 是否空白字符\n */\nexport function isWhiteSpace(char: string) {\n  return /^\\s+$/.test(char)\n}\n"]}