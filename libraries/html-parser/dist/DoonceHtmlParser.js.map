{"version":3,"file":"DoonceHtmlParser.js","sourceRoot":"","sources":["../src/DoonceHtmlParser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author GuangHui\n * @description DoonceHtmlParser 主体程序\n */\n\n/** <         div       id            =                         \"                         app             \"                           >           hello   <           /                   div             >           */\n/** TAG_OPEN  TAG_NAME  TAG_ATTR_NAME TAG_ATTR_NAME_VALUE_SPLIT TAG_ATTR_PRE_DOUBLE_QUOTE TAG_ATTR_VALUE  TAG_ATTR_POST_DOUBLE_QUOTE  TAG_CLOSE   TEXT    TAG_OPEN    TAG_SELF_CLOSEING   POST_TAG_NAME   TAG_CLOSE   */\nexport type State =\n  | 'START' /** 初始状态 */\n  | 'TAG_OPEN' /** 标签开头< */\n  | 'TAG_NAME' /** 标签名 */\n  | 'TAG_ATTR_NAME' /** 属性名,例如<div id=\"app\">中的 id */\n  | 'TAG_ATTR_NAME_VALUE_SPLIT' /** 属性名和值的分隔符号,例如<div id=\"app\">中的= */\n  | 'TAG_ATTR_PRE_DOUBLE_QUOTE' /** 属性值前双引号 */\n  | 'TAG_ATTR_VALUE' /** 属性值 */\n  | 'TAG_ATTR_POST_DOUBLE_QUOTE' /** 属性值后双引号 */\n  | 'TAG_ATTR_SPLIT' /** 多属性分隔符(空格) */\n  | 'TAG_SELF_CLOSEING' /** 结束标签中的/ */\n  | 'POST_TAG_NAME' /** 结束标签名 */\n  | 'TAG_CLOSE' /** 标签结尾> */\n  | 'TEXT' /** 标签内容 */\n  | 'COMMENT' /** 注释信息 */\n\nexport type ContentModifyType = 'trim' | 'extractHtmlCommentContent'\n\nexport interface IToken {\n  type: State\n  startIndex: number /** 相对输入字符串的开始索引位置 */\n  content: string /** 内容(可能会进行trim/内容提取操作,所以用_originContent 保存原始内容) */\n  _originContent?: string /** 原始 content,修改前的 content */\n  _contentModifyType?: ContentModifyType /** 原始内容修改类型 */\n}\n\nexport class DoonceHtmlParser {\n  static State: Record<State, State> = {\n    START: 'START',\n    TAG_OPEN: 'TAG_OPEN',\n    TAG_NAME: 'TAG_NAME',\n    TAG_ATTR_NAME: 'TAG_ATTR_NAME',\n    TAG_ATTR_NAME_VALUE_SPLIT: 'TAG_ATTR_NAME_VALUE_SPLIT',\n    TAG_ATTR_PRE_DOUBLE_QUOTE: 'TAG_ATTR_PRE_DOUBLE_QUOTE',\n    TAG_ATTR_VALUE: 'TAG_ATTR_VALUE',\n    TAG_ATTR_POST_DOUBLE_QUOTE: 'TAG_ATTR_POST_DOUBLE_QUOTE',\n    TAG_ATTR_SPLIT: 'TAG_ATTR_SPLIT',\n    TAG_SELF_CLOSEING: 'TAG_SELF_CLOSEING',\n    POST_TAG_NAME: 'POST_TAG_NAME',\n    TAG_CLOSE: 'TAG_CLOSE',\n    TEXT: 'TEXT',\n    COMMENT: 'COMMENT'\n  }\n\n  debug: boolean\n\n  constructor(debug?: boolean) {\n    this.debug = !!debug\n  }\n\n  parse(input: string): IToken[] {\n    if (!input || typeof input !== 'string') throw new Error('Input string is need provided')\n\n    const tokenList: IToken[] = []\n    let curState: State = DoonceHtmlParser.State.START\n    let curChar = ''\n    let curCharIndex = 0\n\n    while ((curChar = input[curCharIndex])) {\n      this.debug && console.log('-------------------------')\n      this.debug && console.log('before :>> ', curState, curCharIndex, curChar)\n\n      switch (curState) {\n        case DoonceHtmlParser.State.START:\n          if (curChar === '<') {\n            curState = DoonceHtmlParser.State.TAG_OPEN\n          } else {\n            curState = DoonceHtmlParser.State.TEXT\n\n            /** 初始化 text Token,开始收集 text */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          }\n          break\n        case DoonceHtmlParser.State.TAG_OPEN:\n          if (isLetter(curChar)) {\n            curState = DoonceHtmlParser.State.TAG_NAME\n\n            /** 初始化 tagName Token,开始收集 tagName */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else if (curChar === '/') {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else if (curChar === '!') {\n            curState = DoonceHtmlParser.State.COMMENT\n\n            /** 初始化 comment Token,开始收集 comment */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n        case DoonceHtmlParser.State.TAG_NAME:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else if (isWhiteSpace(curChar) && input[curCharIndex + 1] !== '/') {\n            curState = DoonceHtmlParser.State.TAG_ATTR_NAME\n\n            /** 初始化 tagAttrName Token,开始收集 tagAttrName */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else if (\n            /** 兼容类似<br/>情况 */\n            curChar === '/' ||\n            /** 兼容类似<br />情况 */\n            (isWhiteSpace(curChar) && input[curCharIndex + 1] === '/')\n          ) {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else {\n            /** 收集 tagName */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_NAME:\n          if (curChar === '=') {\n            curState = DoonceHtmlParser.State.TAG_ATTR_NAME_VALUE_SPLIT\n          } else if (\n            /** 兼容 tagAttrName 后无 tagAttrValue 声明场景,例如<div jjj>xxx</div>*/\n            curChar === '>'\n          ) {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n\n            // ! 此种特殊场景,会导致有 tagAttrName 无 tagAttrValue\n            // ! 为了兼容给 attrValue 塞一个空值,保证 tagAttrName 和 tagAttrValue 是成对出现\n            // ! 上面的兼容是否有意义?类似<input type=\"check\" disabled>中的 disabled 本身没声明值,却硬塞入一个 tagAttrValue 反而容易产生混淆\n            // ! 基于上面分析,此场景暂不处理\n            // ! 下面代码为之前兼容代码\n            // tokenList.push({\n            //   type: DoonceHtmlParser.State.TAG_ATTR_VALUE,\n            //   startIndex: -1,\n            //   content: ''\n            // })\n          } else if (isWhiteSpace(curChar)) {\n            curState = DoonceHtmlParser.State.TAG_ATTR_SPLIT\n          } else {\n            /** 收集 tagAttrName */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_NAME_VALUE_SPLIT:\n          if (curChar === '\"') {\n            curState = DoonceHtmlParser.State.TAG_ATTR_PRE_DOUBLE_QUOTE\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_PRE_DOUBLE_QUOTE:\n          if (curChar !== '\"') {\n            curState = DoonceHtmlParser.State.TAG_ATTR_VALUE\n\n            /** 初始化 tagAttrValue Token,开始收集 tagAttrValue */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else if (\n            /** 兼容 tagAttrValue 空值场景,例如 <link mask=\"\" xxxxx>此时的双引号要区分 pre 和 post */\n            curChar === '\"' &&\n            input[curCharIndex - 1] === '\"'\n          ) {\n            curState = DoonceHtmlParser.State.TAG_ATTR_POST_DOUBLE_QUOTE\n\n            // ! 此种特殊场景,会导致有 tagAttrName 无 tagAttrValue\n            // ! 其实已经声明了值,只不过值是空字符串\n            // ! 为了兼容给 attrValue 塞一个空字符串\n            tokenList.push({\n              type: DoonceHtmlParser.State.TAG_ATTR_VALUE,\n              startIndex: -1 /** 空字符串,无法确定位置,所以给个-1 */,\n              content: ''\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_VALUE:\n          /** attr 值的后分隔双引号 */\n          if (curChar === '\"' && input[curCharIndex - 1] !== '\\\\') {\n            curState = DoonceHtmlParser.State.TAG_ATTR_POST_DOUBLE_QUOTE\n          } else {\n            /** 收集 tagAttrValue */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_POST_DOUBLE_QUOTE:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else if (curChar === '/') {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else if (isWhiteSpace(curChar)) {\n            curState = DoonceHtmlParser.State.TAG_ATTR_SPLIT\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_ATTR_SPLIT:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else if (curChar === '/') {\n            curState = DoonceHtmlParser.State.TAG_SELF_CLOSEING\n          } else if (!isWhiteSpace(curChar)) {\n            curState = DoonceHtmlParser.State.TAG_ATTR_NAME\n\n            /** 初始化 tagAttrName Token,开始收集 tagAttrName */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            /** 连续空格 */\n            this.debug && console.warn('Multiple consecutive spaces on DoonceHtmlParser.State.TAG_ATTR_SPLIT')\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_SELF_CLOSEING:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else if (isLetter(curChar)) {\n            curState = DoonceHtmlParser.State.POST_TAG_NAME\n\n            /** 初始化 postTagName Token,开始收集 postTagName */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.POST_TAG_NAME:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else {\n            /** 收集postTagName */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TAG_CLOSE:\n          if (curChar === '<') {\n            curState = DoonceHtmlParser.State.TAG_OPEN\n          } else if (curChar) {\n            curState = DoonceHtmlParser.State.TEXT\n\n            /** 初始化 text Token,开始收集 text */\n            tokenList.push({\n              type: curState,\n              startIndex: curCharIndex,\n              content: curChar\n            })\n          } else {\n            //! should never access\n            this.debug && console.warn(`Unrecognized char:${curChar} on DoonceHtmlParser.State.${curState}`)\n          }\n          break\n\n        case DoonceHtmlParser.State.COMMENT:\n          if (curChar === '>') {\n            curState = DoonceHtmlParser.State.TAG_CLOSE\n          } else {\n            /** 收集 comment */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n\n        case DoonceHtmlParser.State.TEXT:\n          if (\n            /** 当前为< && 后续字符中有 > && <到首个>之间无其它<,则进入 TAG_OPEN 状态 */\n            curChar === '<' &&\n            this._hasLessThanSymbolBetweenStartIndexAndFirstGreatThanSymbolIndex(input, curCharIndex)\n          ) {\n            curState = DoonceHtmlParser.State.TAG_OPEN\n          } else {\n            /** 收集 text */\n            tokenList[tokenList.length - 1].content += curChar\n          }\n          break\n      }\n      this.debug && console.log('after :>> ', curState)\n\n      curCharIndex++\n    }\n\n    /** 对TAG_ATTR_NAME做 trim 操作 */\n    tokenList\n      .filter(item => item.type === DoonceHtmlParser.State.TAG_ATTR_NAME)\n      .forEach(item => {\n        item._originContent = item.content\n        item.content = item.content.trim()\n        item._contentModifyType = 'trim'\n      })\n\n    /** 对 COMMENT 做提取 */\n    tokenList\n      .filter(item => item.type === DoonceHtmlParser.State.COMMENT)\n      .forEach(item => {\n        item._originContent = item.content\n        item.content = extractHtmlCommentContent(item.content)\n        item._contentModifyType = 'extractHtmlCommentContent'\n      })\n\n    this.debug && console.log('normalize after tokenList :>> ', tokenList)\n\n    return tokenList\n  }\n\n  /**\n   * 给定字符串,从给定位置到首个>符号之前,是否存在<符号\n   *\n   * @date 2023-07-09 01:22:43\n   * @private\n   * @param input 输入字符串\n   * @param startIndex <字符起始索引\n   * @returns {boolean} 是否从 TEXT 转换为 TAG_OPEN 状态\n   * @memberof DoonceHtmlParser\n   */\n  private _hasLessThanSymbolBetweenStartIndexAndFirstGreatThanSymbolIndex(input: string, startIndex: number) {\n    const afterStartIndexStr = input.slice(startIndex + 1)\n    const firstGreatThanSymbolIndex = afterStartIndexStr.indexOf('>')\n\n    if (firstGreatThanSymbolIndex === -1) return false\n\n    return afterStartIndexStr.slice(0, firstGreatThanSymbolIndex).indexOf('<') === -1\n  }\n}\n\n/**\n * 提取 htmlComment 中的内容\n *\n * @date 2023-07-09 04:30:03\n * @export\n * @param htmlComment html 注释\n * @returns {string} 内容\n */\nexport function extractHtmlCommentContent(htmlComment: string) {\n  const reg = /!--(.+?)--/\n\n  if (!reg.test(htmlComment)) return htmlComment\n\n  return htmlComment.match(reg)![1]\n}\n\n/**\n * 是否英文字母\n *\n * @date 2023-07-09 01:19:52\n * @export\n * @param char\n * @returns {boolean} 是否英文字母\n */\nexport function isLetter(char: string) {\n  return /^[a-zA-Z]$/.test(char)\n}\n\n/**\n * 是否空白字符\n *\n * @date 2023-07-09 01:19:23\n * @export\n * @param char\n * @returns {boolean} 是否空白字符\n */\nexport function isWhiteSpace(char: string) {\n  return /^\\s$/.test(char)\n}\n"]}