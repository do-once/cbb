{"version":3,"file":"url.js","sourceRoot":"","sources":["../src/url.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author GuangHui\n * @description URL相关\n */\n\n/**\n * 解析查询字符串\n * @param {String} qs 需要解析的查询字符串\n * @return {Object} 解析后的对象\n * http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&d&enabled\n * 解析后:\n * {\n  user: 'anonymous',\n  id: [123, 456],     // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京',        // 中文\n  enabled: true,      // 未指定值的 key 约定值为 true\n  d:true\n}\n */\nexport function getQueryObject(qs = location.search) {\n  if (!qs || typeof qs !== 'string') return {}\n\n  qs = decodeURIComponent(qs.substring(qs.lastIndexOf('?')))\n\n  const re = /([^?&=]+)(=([^&?=]+))?/g\n\n  const obj: Record<string, unknown> = {}\n\n  for (let result = re.exec(qs); result != null; result = re.exec(qs)) {\n    let key = result[1]\n    let value: string | number = result[3]\n\n    if (value == null) {\n      obj[key] = true\n      continue\n    }\n\n    if (!isNaN(Number(value))) value = Number(value)\n\n    const target = obj[key]\n    if (target) {\n      if (Array.isArray(target)) {\n        target.push(value)\n      } else {\n        obj[key] = [target, value]\n      }\n    } else {\n      obj[key] = value\n    }\n  }\n\n  return obj\n}\n\n/**\n * 从URL中解析出protocol、host\n *\n * @export\n * @param {string} url 待解析的URL\n * @returns {URLOrigin} 解析出的protocol、host对象\n */\nexport function resolveURL(url: string) {\n  let urlParsingNode = document.createElement('a')\n  urlParsingNode.setAttribute('href', url)\n\n  const { protocol, host } = urlParsingNode\n\n  urlParsingNode = null as unknown as HTMLAnchorElement\n\n  return { protocol, host }\n}\n\n/**\n * 判断是否同源URL\n *\n * @export\n * @param {*} requestURL 请求URL\n * @param {*} [requestURL2=window.location.href] 需要对应请求URL2，默认当前域\n * @returns\n */\nexport function isURLSameOrigin(requestURL: string, requestURL2 = window.location.href) {\n  if (typeof requestURL !== 'string' || typeof requestURL2 !== 'string') {\n    throw new Error('请输入正确的URL')\n  }\n\n  const { protocol, host } = resolveURL(requestURL)\n  const { protocol: curProtocol, host: curHost } = resolveURL(requestURL2)\n\n  return protocol === curProtocol && host === curHost\n}\n\n/**\n * 判断是否绝对路径\n *\n * @export\n * @param {string} url 待判断url\n * @returns {boolean} 是否绝对路径\n */\nexport function isAbsoluteURL(url: string) {\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url)\n}\n\n/**\n * 拼接URL\n *\n * @export\n * @param {string} baseURL 基础URL\n * @param {string} [relativeURL] 相对URL\n * @returns {string} 完整URL\n */\nexport function combineURL(baseURL: string, relativeURL: string) {\n  return relativeURL ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '') : baseURL\n}\n"]}