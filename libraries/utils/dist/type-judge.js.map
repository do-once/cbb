{"version":3,"file":"type-judge.js","sourceRoot":"","sources":["../src/type-judge.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;GAMG;AACH,MAAM,UAAU,OAAO,CAAC,GAAQ;IAC9B,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,MAAM,CAAA;AAC/F,CAAC;AAED;;;GAGG;AACH,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO;IAC7B,CAAC,CAAC,KAAK,CAAC,OAAO;IACf,CAAC,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,gBAAgB,CAAA;AAC1E,MAAM,UAAU,OAAO,CAAC,GAAQ;IAC9B,OAAO,SAAS,CAAC,GAAG,CAAC,CAAA;AACvB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,UAAe;IACzC,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA;IAC3C,+BAA+B;IAC/B,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAA;IAChC,OAAO,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,IAAI,eAAe,CAAA;AAC/E,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAA;AAC7G,MAAM,UAAU,QAAQ,CAAC,GAAQ;IAC/B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;IAEvB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAA;AACxB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,UAAU,CAAC,EAAO;IAChC,OAAO,OAAO,EAAE,KAAK,UAAU,CAAA;AACjC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,GAAQ;IACtC,IAAI,GAAG,IAAI,IAAI;QAAE,OAAO,IAAI,CAAA;IAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAC,MAAM,KAAK,CAAC,CAAA;IAC/C,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,EAAE;QAC7D,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAA;KACrC;IACD,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["/**\n * @author GuangHui\n * @description 常用类型判断\n */\n\n/**\n * 判断是否为空（null、'',[],{},0）\n *\n * @export\n * @param {Any} obj 需要判断的对象\n * @returns {Boolean} 是否为空\n */\nexport function isEmpty(obj: any) {\n  return [Object, Array].includes((obj || {}).constructor) && !Object.entries(obj || {}).length\n}\n\n/**\n * 判断是否是数组\n * @param {Any} arr 需要判断的对象\n */\nconst isArrayFn = Array.isArray\n  ? Array.isArray\n  : (val: any) => Object.prototype.toString.call(val) === '[object Array]'\nexport function isArray(arr: any) {\n  return isArrayFn(arr)\n}\n\n/**\n * 判断是否为类数组\n * @param {Collection} collection\n */\nexport function isArrayLike(collection: any) {\n  const MAX_ARRAY_INDEX = Math.pow(2, 53) - 1\n  // 返回参数 collection 的 length 属性值\n  const length = collection.length\n  return typeof length === 'number' && length >= 0 && length <= MAX_ARRAY_INDEX\n}\n\n/**\n * 检查 value 是否是原始有限数值\n * 会排除 Infinity, -Infinity, 以及 NaN 数值类型\n *\n * @export\n * @param {Any} val\n * @returns\n */\nconst isFiniteFn = Number.isFinite ? Number.isFinite : (val: any) => typeof val === 'number' && isFinite(val)\nexport function isFinite(val: any): boolean {\n  console.log(isFiniteFn)\n\n  return isFiniteFn(val)\n}\n\n/**\n * 判断是否为函数\n * @param {Any} fn 需要判断的对象\n */\nexport function isFunction(fn: any) {\n  return typeof fn === 'function'\n}\n\n/**\n * 判断数组或对象是否为空\n * @param {Any} obj\n */\nexport function isEmptyArrOrObj(obj: any) {\n  if (obj == null) return true\n  if (Array.isArray(obj)) return obj.length === 0\n  if (Object.prototype.toString.call(obj) === '[object Object]') {\n    return Object.keys(obj).length === 0\n  }\n  return false\n}\n"]}