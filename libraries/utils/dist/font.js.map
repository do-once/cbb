{"version":3,"file":"font.js","sourceRoot":"","sources":["../src/font.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAC5B,MAAc,EACd,MAA2B,EAC3B,WAAiC;IAEjC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAA;IAEtD,IAAI;QACF,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;QACjB,iBAAiB;QACjB,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;KACzB;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,GAAG,CAAC,aAAa,MAAM,aAAa,EAAE,KAAK,CAAC,CAAA;KACrD;IAED,OAAO,IAAI,CAAA;AACb,CAAC;AAwBD,MAAM,CAAC,MAAM,kBAAkB,GAAwB,CAAC,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE;IAC/E,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc;QAAE,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;IAEpF,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;QAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QAC5C,kBAAkB,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,IAAI,CAAE,CAAA;KACtD;IAED,kBAAkB,CAAC,UAAU,CAAC,IAAI,GAAG,cAAc,CAAA;IACnD,OAAO,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;AACxD,CAAC,CAAC,CAAA;AAWF;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,cAAc,CAAC,EAC7B,QAAQ,EACR,UAAU,EACV,SAAS,EACT,UAAU,EACV,UAAU,EACV,WAAW,EACF;IACT,IAAI,CAAC,QAAQ,IAAI,CAAC,UAAU;QAAE,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;IAEpF,MAAM,IAAI,GAAG;QACX,SAAS,IAAI,EAAE;QACf,WAAW,IAAI,EAAE;QACjB,UAAU,IAAI,EAAE;QAChB,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,IAAI,CAAC,CAAC,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE;QACnG,UAAU,IAAI,EAAE;KACjB,CAAA;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACxC,CAAC","sourcesContent":["/**\n * @author GuangHui\n * @description 字体相关库\n */\n\n/**\n * 加载字体\n * 参考:https://developer.mozilla.org/en-US/docs/Web/API/FontFace/FontFace\n *\n * @date 2023-07-17 23:33:33\n * @export\n * @param family 字体名\n * @param source 字体来源,格式为`url(\"path/to/font\")`\n * @param [descriptors] 字体描述对象\n * @returns {FontFace} 需要加载的 FontFace 对象\n */\nexport async function loadFont(\n  family: string,\n  source: string | BinaryData,\n  descriptors?: FontFaceDescriptors\n) {\n  const font = new FontFace(family, source, descriptors)\n\n  try {\n    await font.load()\n    /** 加载成功,加入字体集 */\n    document.fonts.add(font)\n  } catch (error) {\n    console.log(`load font ${family} faild :>> `, error)\n  }\n\n  return font\n}\n\n/**\n * 测量字符宽度\n *\n * @date 2023-07-17 23:51:16\n * @export\n * @param text 待测量字符\n * @param cssFontDescStr 和 cssFont 规范一样的字体描述字符串,参考https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\n * 必须包含以下值：\n * <font-size><font-family>\n * 可以选择性包含以下值：\n * <font-style><font-variant><font-weight><line-height>\n * font-style, font-variant 和 font-weight 必须在 font-size 之前\n * 在 CSS 2.1 中 font-variant 只可以是 normal 和 small-caps\n * line-height 必须跟在 font-size 后面，由 \"/\" 分隔，例如 \"16px/3\"\n * font-family 必须最后指定\n * @example cssFontStr -> \"italic normal bold 16px/20px SimSun\"\n * @returns {TextMetrics} canvas文本尺寸对象\n */\nexport type IMeasureTextMetrics = {\n  (text: string, cssFontDescStr: string): TextMetrics\n  _cachedCtx: CanvasRenderingContext2D\n}\nexport const measureTextMetrics = <IMeasureTextMetrics>((text, cssFontDescStr) => {\n  if (!text || !cssFontDescStr) throw new Error('text and cssFontDescStr is required')\n\n  if (!measureTextMetrics._cachedCtx) {\n    const cas = document.createElement('canvas')\n    measureTextMetrics._cachedCtx = cas.getContext('2d')!\n  }\n\n  measureTextMetrics._cachedCtx.font = cssFontDescStr\n  return measureTextMetrics._cachedCtx.measureText(text)\n})\n\nexport type FontDesc = {\n  fontSize: number | string\n  fontFamily: string\n  lineHeight?: number | string\n  fontStyle?: string\n  fontWeight?: string | number\n  fontVariant?: string\n}\n\n/**\n * 获取cssFont字体描述字符串\n *\n * 参考https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\n * 必须包含以下值：\n * <font-size><font-family>\n * 可以选择性包含以下值：\n * <font-style><font-variant><font-weight><line-height>\n * font-style, font-variant 和 font-weight 必须在 font-size 之前\n * 在 CSS 2.1 中 font-variant 只可以是 normal 和 small-caps\n * line-height 必须跟在 font-size 后面，由 \"/\" 分隔，例如 \"16px/3\"\n * font-family 必须最后指定\n * @example cssFontStr -> \"italic small-caps bold 16px/20px SimSun\n * @date 2023-07-18 14:17:02\n * @export\n * @param fontDescObj 字体描述对象\n * @returns {string} 字体描述字符串\n */\nexport function getCssFontDesc({\n  fontSize,\n  fontFamily,\n  fontStyle,\n  fontWeight,\n  lineHeight,\n  fontVariant\n}: FontDesc) {\n  if (!fontSize || !fontFamily) throw new Error('fontSize and fontFamily is required')\n\n  const temp = [\n    fontStyle ?? '',\n    fontVariant ?? '',\n    fontWeight ?? '',\n    `${typeof fontSize === 'number' ? `${fontSize}px` : fontSize}${lineHeight ? '/' + lineHeight : ''}`,\n    fontFamily ?? ''\n  ]\n  return temp.filter(i => !!i).join(' ')\n}\n"]}