{"version":3,"file":"file-convert.js","sourceRoot":"","sources":["../src/file-convert.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author GuangHui\n * @description 文件相关类型转换函数\n */\n\nimport { isIE } from './browser'\n\n/**\n * dataURL(base64)转Blob\n *\n * @export Blob\n * @param {String} dataurl dataURL字符串\n * @returns Blob\n */\nexport function dataURL2Blob(dataurl: string) {\n  var arr = dataurl.split(','),\n    // @ts-ignore\n    mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]),\n    n = bstr.length,\n    u8arr = new Uint8Array(n)\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n)\n  }\n  return new Blob([u8arr], { type: mime })\n}\n\n/**\n * dataURL(base64)转File\n *\n * @export File\n * @param {String} dataurl\n * @param {String} filename\n * @returns File\n */\nexport function dataURL2File(dataurl: string, filename: string) {\n  var arr = dataurl.split(','),\n    // @ts-ignore\n    mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]),\n    n = bstr.length,\n    u8arr = new Uint8Array(n)\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n)\n  }\n  return new File([u8arr], filename, { type: mime })\n}\n\n/**\n * blob、file转 dataURL(base64)\n *\n * @export base64\n * @param {Blob|File} blobOrFile\n * @returns dataURL\n */\nexport function blob2DataURL(blobOrFile: Blob) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.readAsDataURL(blobOrFile)\n\n    reader.onload = function (e) {\n      resolve(reader.result)\n    }\n\n    reader.onerror = function (err) {\n      reject(err)\n    }\n  })\n}\n\n/**\n * file转Blob\n *\n * @export\n * @param {File} file file对象\n * @returns\n */\nexport function file2Blob(file: Blob) {\n  return new Promise((resolve, reject) => {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onload = function (e) {\n      resolve(new Blob([reader.result as unknown as BlobPart], { type: file.type }))\n    }\n\n    reader.onerror = function (err) {\n      reject(err)\n    }\n  })\n}\n\n/**\n * blob转File\n *\n * @export File\n * @param {Blob} blob blob\n * @param {String} name filename\n * @returns\n */\nexport function blob2File(blob: Blob, name: string) {\n  if (isIE) {\n    // IE不支持new File\n    // @ts-ignore\n    blob!.lastModifiedDate = new Date()\n    // @ts-ignore\n    blob.name = name\n    return blob\n  } else {\n    return new File([blob], name, { type: blob.type })\n  }\n}\n\n/**\n * blob、file 转ObjectURL\n *\n * @export ObjectURL\n * @param {Blob|File} blobOrFile\n * @returns ObjectURL\n */\nexport function blob2ObjectURL(blobOrFile: Blob) {\n  return URL && URL.createObjectURL ? URL.createObjectURL(blobOrFile) : new Error('blob2ObjectURL转换出错')\n}\n\n/**\n * string -> base64\n * btoa从二进制数据“字符串”创建一个base-64编码的ASCII字符串\n * 实现参考\n * https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n * https://developer.mozilla.org/zh-CN/docs/Web/API/WindowBase64/btoa#Unicode_%E5%AD%97%E7%AC%A6%E4%B8%B2\n *\n * @export\n * @param {String} s 需要编码的字符串\n * @returns\n */\nexport function _btoa(s: string) {\n  if (btoa) {\n    return btoa(\n      // 原生btoa，无法编码中文，需要encodeURIComponent再escape(转义)\n      encodeURIComponent(s).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n        // @ts-ignore\n        return String.fromCharCode('0x' + p1)\n      })\n    )\n  }\n}\n\n/**\n * base64 -> string\n * atob能够解码通过base-64编码的字符串数据\n *\n * @export\n * @param {String} s 需要解码的base64字符串\n * @returns\n */\nexport function _atob(s: string) {\n  if (atob) {\n    return decodeURIComponent(\n      atob(s)\n        .split('')\n        .map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n        })\n        .join('')\n    )\n  }\n}\n"]}