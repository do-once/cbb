{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,SAAS,CAAA;AAU3D,MAAM,CAAC,OAAO,OAAO,aAAa;IACxB,SAAS,CAAU;IACnB,gBAAgB,CAAU;IAC1B,QAAQ,CAAU;IAClB,OAAO,CAAQ;IACf,QAAQ,CAAQ;IAExB,YAAY,UAAmB,EAAE;QAC/B,MAAM,EAAE,SAAS,EAAE,gBAAgB,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAA;QAE5E,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA,CAAC,OAAO;QACzD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA,CAAC,MAAM;QAC7E,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA,CAAC,QAAQ;QACvF,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,GAAG,CAAA;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,GAAG,CAAA;IACjC,CAAC;IAED;;;;;;OAMG;IACH,UAAU,CAAC,CAAS;QAClB,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC;YAAE,OAAO,EAAE,CAAA;QAEhD,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;IACzB,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CAAC,CAAS;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;IAC1B,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB,CAAC,CAAS;QAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAA;IACjC,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,OAAe;QAC3B,IAAI,OAAO,OAAO,KAAK,QAAQ;YAAE,OAAO,MAAM,CAAA;QAC9C,OAAO,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAA;IAC5C,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CAAC,QAAgB;QAC7B,IAAI,OAAO,QAAQ,KAAK,QAAQ;YAAE,OAAO,MAAM,CAAA;QAC/C,OAAO,QAAQ,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAA;IAC9C,CAAC;IAED;;;;;;OAMG;IACH,iBAAiB,CAAC,CAAkB;QAClC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACrD,OAAO,SAAS,CAAA;SACjB;QAED,OAAO,MAAM,CAAC,CAAC,CAAC;aACb,KAAK,CAAC,EAAE,CAAC;aACT,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;aAC1C,IAAI,CAAC,EAAE,CAAC,CAAA;IACb,CAAC;IAED;;;;;;OAMG;IACH,mBAAmB,CAAC,CAAkB;QACpC,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;QAEnB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAA;QAEhE,IAAI,GAAG,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,CAAA;QAEzB,IAAI,IAAI,GAAG,EAAE,CAAA;QAEb,OAAO,GAAG,GAAG,CAAC,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAA;YACtB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAA;SAC9B;QACD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAA;IACvB,CAAC;IAED;;;;;;OAMG;IACH,cAAc,CAAC,OAAwB;QACrC,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE;YACjD,OAAO,qBAAqB,CAAA;SAC7B;QAED,IAAI,GAAG,GAAG,EAAE,CAAA;QACZ,IAAI,gBAAgB,GAAG,KAAK,CAAA;QAC5B,IAAI,SAAS,GAAG,CAAC,CAAA;QAEjB,OAAO,GAAG,GAAG,CAAC,EAAE;YACd,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAA,CAAC,OAAO;YACxB,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,IAAI,gBAAgB,EAAE;oBACpB,gBAAgB,GAAG,KAAK,CAAA,CAAC,wBAAwB;oBACjD,GAAG,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;iBACzC;aACF;iBAAM;gBACL,0BAA0B;gBAC1B,gBAAgB,GAAG,IAAI,CAAA;gBACvB,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,CAAA;aAC7D;YAED,SAAS,EAAE,CAAA;YACX,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC,CAAA;SAC3B;QAED,OAAO,GAAG,CAAA;IACZ,CAAC;IAED;;;;;;OAMG;IACH,kBAAkB,CAAC,YAA6B;QAC9C,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;QACtC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,SAAS,GAAG,CAAC,EAAE;YAC7C,OAAO,mBAAmB,CAAA;SAC3B;QAED,IAAI,SAAS,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;QAE9C,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAA;QAEvD,MAAM,sBAAsB,GAAG,WAAW;aACvC,OAAO,EAAE,CAAC,mBAAmB;aAC7B,MAAM,CAAC,CAAC,GAAU,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;YACtC,IAAI,GAAG,KAAK,CAAC;gBAAE,OAAO,GAAG,CAAA;YAEzB,oBAAoB;YACpB,IAAI,UAAU,GACZ,KAAK,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI;gBACpC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACzD,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA;YAE9B,mBAAmB;YACnB,cAAc;YACd,IAAI,KAAK,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE;gBACrD,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;aAC1C;YAED,UAAU,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;YAE5C,OAAO,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QAC/B,CAAC,EAAE,EAAE,CAAC,CAAA;QAER,OAAO,sBAAsB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IAClD,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,CAAkB;QAC1B,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;QAErB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;YAAE,OAAO,cAAc,CAAA;QAE7C,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,GAAG,CAAC,CAAA;QAEzD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QAErD,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAA;QAErD,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QAEjD,MAAM,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QAEjE,OAAO,GAAG,OAAO,GAAG,WAAW,GAAG,MAAM,GAAG,UAAU,EAAE,CAAA;IACzD,CAAC;CACF","sourcesContent":["/**\n * @author GuangHui\n * @description DoonceNum2chn 入口\n */\n\nimport { isSafeNumber, padStr, getNumParts } from './utils'\n\nexport interface Options {\n  unitChars?: string[]\n  sectionUnitChars?: string[]\n  numChars?: string[]\n  dotChar?: string\n  signChar?: string\n}\n\nexport default class DoonceNum2chn {\n  private unitChars: string[]\n  private sectionUnitChars: string[]\n  private numChars: string[]\n  private dotChar: string\n  private signChar: string\n\n  constructor(options: Options = {}) {\n    const { unitChars, sectionUnitChars, numChars, dotChar, signChar } = options\n\n    this.unitChars = unitChars || ['', '十', '百', '千'] // 节内权位\n    this.sectionUnitChars = sectionUnitChars || ['', '万', '亿', '万亿', '亿亿'] // 节权位\n    this.numChars = numChars || ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'] // 数字映射表\n    this.dotChar = dotChar || '点'\n    this.signChar = signChar || '负'\n  }\n\n  /**\n   * 获取数字对应中文\n   *\n   * @param {number} n 数字\n   * @returns {string} 数字对应中文\n   * @memberof Num2Chn\n   */\n  getNumChar(n: number): string {\n    if (typeof n !== 'number' || isNaN(n)) return ''\n\n    return this.numChars[n]\n  }\n\n  /**\n   * 获取节内权位\n   *\n   * @param {number} i 索引\n   * @returns {string} 对应中文\n   * @memberof Num2Chn\n   */\n  getUnitChar(i: number): string {\n    return this.unitChars[i]\n  }\n\n  /**\n   * 获取节权位\n   *\n   * @param {number} i 索引\n   * @returns {string} 对应中文\n   * @memberof Num2Chn\n   */\n  getSectionUnitChar(i: number): string {\n    return this.sectionUnitChars[i]\n  }\n\n  /**\n   * 获取点号对应中文\n   *\n   * @param {string} dotPart 点号部分\n   * @returns {string} 点号对应中文\n   * @memberof Num2Chn\n   */\n  getDotPartChn(dotPart: string): string {\n    if (typeof dotPart !== 'string') return '无法解析'\n    return dotPart === '.' ? this.dotChar : ''\n  }\n\n  /**\n   * 获取符号对应中文\n   *\n   * @param {string} signPart 符号部分\n   * @returns {string} 符号对应中文\n   * @memberof Num2Chn\n   */\n  getSignPartChn(signPart: string): string {\n    if (typeof signPart !== 'string') return '无法解析'\n    return signPart === '-' ? this.signChar : ''\n  }\n\n  /**\n   * 获取小数部分的中文表示\n   *\n   * @param {(number | string)} n 小数部分\n   * @returns {string} 小数部分的中文表示\n   * @memberof Num2Chn\n   */\n  getDecimalPartChn(n: number | string): string {\n    if (!isSafeNumber(Number(n)) || typeof n !== 'string') {\n      return '参数为无法解析'\n    }\n\n    return String(n)\n      .split('')\n      .map(item => this.getNumChar(Number(item)))\n      .join('')\n  }\n\n  /**\n   * 获取整数部分小节\n   *\n   * @param {(number | string)} n 整数\n   * @returns {number[]} 小节数组\n   * @memberof Num2Chn\n   */\n  getIntergerSections(n: number | string): number[] {\n    let num = Number(n)\n\n    if (!isSafeNumber(num) || num < 0) throw new Error('参数无法解析或小于0')\n\n    if (num === 0) return [0]\n\n    let temp = []\n\n    while (num > 0) {\n      temp.push(num % 10000)\n      num = Math.floor(num / 10000)\n    }\n    return temp.reverse()\n  }\n\n  /**\n   * 翻译小节\n   *\n   * @param {(number|string)} section 4位长度的小节\n   * @returns {string} 小节对应中文\n   * @memberof Num2Chn\n   */\n  getSectionsChn(section: number | string): string {\n    let num = Number(section)\n    if (!isSafeNumber(num) || num >= 10000 || num < 0) {\n      return '节无法解析成数字或位数超过4位或小于0'\n    }\n\n    let str = ''\n    let needPadStartZero = false\n    let unitCount = 0\n\n    while (num > 0) {\n      let g = num % 10 // 取个位数\n      if (g === 0) {\n        if (needPadStartZero) {\n          needPadStartZero = false // 当前为0，已经补过零，下次若还为0则不需补\n          str = padStr(str, 1, this.getNumChar(0))\n        }\n      } else {\n        // 当前数不为0，默认下次为0，需要进行补零操作。\n        needPadStartZero = true\n        str = this.getNumChar(g) + this.getUnitChar(unitCount) + str\n      }\n\n      unitCount++\n      num = Math.floor(num / 10)\n    }\n\n    return str\n  }\n\n  /**\n   * 获取整数部分对应中文\n   *\n   * @param {(number|string)} intergerPart 整数部分\n   * @returns {string} 整数部分对应中文\n   * @memberof Num2Chn\n   */\n  getIntergetPartChn(intergerPart: number | string): string {\n    const originNum = Number(intergerPart)\n    if (!isSafeNumber(originNum) || originNum < 0) {\n      return '无法解析成数字或超出范围或不是正数'\n    }\n\n    if (originNum === 0) return this.getNumChar(0)\n\n    const sectionsArr = this.getIntergerSections(originNum)\n\n    const transformedSectionsArr = sectionsArr\n      .reverse() // 翻转小节，从最后一个小节开始翻译\n      .reduce((acc: any[], cur, index, arr) => {\n        if (cur === 0) return acc\n\n        // 非首小节并小于1000的需要前补零\n        let sectionChn =\n          index !== arr.length - 1 && cur < 1000\n            ? padStr(this.getSectionsChn(cur), 1, this.getNumChar(0))\n            : this.getSectionsChn(cur)\n\n        // 处理首小节为10~19的特殊场景\n        // 一十一，需要转换成十一\n        if (index === arr.length - 1 && cur >= 10 && cur < 20) {\n          sectionChn = sectionChn.replace(/^一/, '')\n        }\n\n        sectionChn += this.getSectionUnitChar(index)\n\n        return acc.concat(sectionChn)\n      }, [])\n\n    return transformedSectionsArr.reverse().join('')\n  }\n\n  /**\n   * 浮点数转中文数字\n   *\n   * @export\n   * @param {(number | string)} n 需要转换的数字\n   * @returns {string} 数字对应中文\n   */\n  transform(n: number | string): string {\n    const num = Number(n)\n\n    if (!isSafeNumber(num)) return '无法解析成数字或超出范围'\n\n    const { sign, interger, dot, decimal } = getNumParts(num)\n\n    const signChn = sign ? this.getSignPartChn(sign) : ''\n\n    const intergerChn = this.getIntergetPartChn(interger)\n\n    const dotChn = dot ? this.getDotPartChn(dot) : ''\n\n    const decimalChn = decimal ? this.getDecimalPartChn(decimal) : ''\n\n    return `${signChn}${intergerChn}${dotChn}${decimalChn}`\n  }\n}\n"]}