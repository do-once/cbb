{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AASH;;;;;;GAMG;AACH,SAAgB,YAAY,CAAC,CAAS;IACpC,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;AAC5E,CAAC;AAFD,oCAEC;AAED;;;;;;;;;GASG;AACH,SAAgB,MAAM,CAAC,GAAW,EAAE,MAAc,EAAE,OAAe,EAAE,MAAM,GAAG,IAAI;IAChF,IACE,OAAO,GAAG,KAAK,QAAQ;QACvB,OAAO,MAAM,KAAK,QAAQ;QAC1B,KAAK,CAAC,MAAM,CAAC;QACb,MAAM,IAAI,CAAC;QACX,OAAO,OAAO,KAAK,QAAQ,EAC3B;QACA,OAAO,GAAG,CAAA;KACX;IAED,OAAO,MAAM,EAAE;QACb,IAAI,MAAM,EAAE;YACV,GAAG,GAAG,OAAO,GAAG,GAAG,CAAA;SACpB;aAAM;YACL,GAAG,IAAI,OAAO,CAAA;SACf;QACD,MAAM,EAAE,CAAA;KACT;IAED,OAAO,GAAG,CAAA;AACZ,CAAC;AArBD,wBAqBC;AAED;;;;;;GAMG;AACH,SAAgB,WAAW,CAAC,CAAS;IACnC,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;IACrB,MAAM,GAAG,GAAG,iCAAiC,CAAA;IAE7C,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;IAC1B,MAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAE5B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAA;IAE9D,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,GAAG,CAAA;IAExD,OAAO;QACL,IAAI;QACJ,QAAQ;QACR,GAAG;QACH,OAAO;KACR,CAAA;AACH,CAAC;AAjBD,kCAiBC","sourcesContent":["/**\n * @author GuangHui\n * @description description\n */\n\nexport interface NumberParts {\n  sign: string\n  interger: string\n  dot: string\n  decimal: string\n}\n\n/**\n * 判断数字是否在安全范围内\n *\n * @export\n * @param {number} n  数字\n * @returns {boolean} 是否是安全数字\n */\nexport function isSafeNumber(n: number): boolean {\n  return typeof n === 'number' && !isNaN(n) && Math.abs(n) < Math.pow(2, 53)\n}\n\n/**\n * 填充字符串\n *\n * @export\n * @param {string} str 原始字符串\n * @param {number} padNum 填充数量\n * @param {string} padChar 填充字符\n * @param {boolean} [before=true] 前填充\n * @returns 填充后的字符串\n */\nexport function padStr(str: string, padNum: number, padChar: string, before = true) {\n  if (\n    typeof str !== 'string' ||\n    typeof padNum !== 'number' ||\n    isNaN(padNum) ||\n    padNum <= 0 ||\n    typeof padChar !== 'string'\n  ) {\n    return str\n  }\n\n  while (padNum) {\n    if (before) {\n      str = padChar + str\n    } else {\n      str += padChar\n    }\n    padNum--\n  }\n\n  return str\n}\n\n/**\n * 获取浮点数各组成部分\n *\n * @export\n * @param {number} n 待解析数字\n * @returns {(NumberParts | string)} 各组成部分\n */\nexport function getNumParts(n: number): NumberParts {\n  const num = Number(n)\n  const reg = /^([-+]?)(0|[1-9]\\d*)(\\.?)(\\d*)$/\n\n  const numStr = String(num)\n  const ret = reg.exec(numStr)\n\n  if (!isSafeNumber(num) || ret == null) throw new Error('无法解析')\n\n  const { 1: sign, 2: interger, 3: dot, 4: decimal } = ret\n\n  return {\n    sign,\n    interger,\n    dot,\n    decimal\n  }\n}\n"]}