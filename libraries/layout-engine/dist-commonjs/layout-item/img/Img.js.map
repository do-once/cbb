{"version":3,"file":"Img.js","sourceRoot":"","sources":["../../../src/layout-item/img/Img.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;AAEH,yCAAkF;AAGlF,kCAA6F;AAU7F,MAAa,GAAI,SAAQ,WAAI;IAC3B,cAAc,GAAG,yBAAkB,CAAC,GAAG,CAAA;IACvC,YAAY,GAAG,KAAK,CAAA;IAEpB,gBAAgB,CAAkB;IAClC,KAAK,CAAQ;IACb,eAAe,CAAoB;IAEnC,UAAU,CAAwB;IAClC,OAAO,GAAwB,EAAE,CAAA;IAEjC,KAAK,GAAkB,CAAC,CAAC,CAAA;IAEzB,YAAY,EAAE,KAAK,EAAE,gBAAgB,EAAE,eAAe,EAAE,UAAU,EAAE,KAAK,EAAiB;QACxF,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAA;QACxB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAA;QACxC,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,yBAAkB,CAAC,IAAI,CAAA;QACjE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAE5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK;QACtB,yBAAyB;QACzB,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,KAAK;YAAE,OAAM;QAEtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAA;QAE9B,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;QAClD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAEpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;IACzB,CAAC;IAED,KAAK,CAAC,WAAW;QACf,IAAI,SAAS,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAA;QACvC,IAAI,IAAI,CAAC,SAAS,EAAE;YAAE,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAEzD,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,sBAAc,EAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAE/D,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;YACvC,MAAM,EAAE,SAAS,CAAC,MAAM,GAAG,MAAM;SAClC,CAAA;IACH,CAAC;IAEO,SAAS;QACf,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;IAED,gBAAgB;QACd,MAAM,WAAW,GAAG;YAClB,GAAG,IAAI,CAAC,gBAAgB;YACxB,UAAU,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,IAAI;SACpD,CAAA;QACD,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,0BAAkB,EAAC,IAAI,CAAC,KAAK,EAAE,IAAA,sBAAc,EAAC,WAAW,CAAC,CAAC,CAAA;QAE7E,OAAO;YACL,KAAK;YACL,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU;SACzC,CAAA;IACH,CAAC;CACF;AAjED,kBAiEC","sourcesContent":["/**\n * @author GuangHui\n * @description 图片类\n */\n\nimport { getCssFontDesc, measureImgSize, measureTextMetrics } from '@doonce/utils'\nimport { GlobalFontConfig } from '../../DoonceLayoutEngine'\n\nimport { ISize, Base, LayoutItemTypeEnum, ImgSurrounTypeEnum, IContent, IRow } from '../base'\n\nexport type ImgCtrOptions = {\n  title?: string\n  rowNo: IRow['rowNo']\n  rawContent: IContent['rawContent']\n  globalFontConfig: GlobalFontConfig\n  imgSurroundType: ImgSurrounTypeEnum\n}\n\nexport class Img extends Base implements IContent, IRow {\n  layoutItemType = LayoutItemTypeEnum.IMG\n  canLineBreak = false\n\n  globalFontConfig: GlobalFontConfig\n  title: string\n  imgSurroundType: ImgSurrounTypeEnum\n\n  rawContent: IContent['rawContent']\n  content: IContent['content'] = ''\n\n  rowNo: IRow['rowNo'] = -1\n\n  constructor({ title, globalFontConfig, imgSurroundType, rawContent, rowNo }: ImgCtrOptions) {\n    super()\n\n    this.title = title ?? ''\n    this.globalFontConfig = globalFontConfig\n    this.imgSurroundType = imgSurroundType ?? ImgSurrounTypeEnum.NONE\n    this.rawContent = rawContent\n\n    this.rowNo = rowNo\n  }\n\n  async init(force = false) {\n    /** 已经初始化,并不是强制初始化,则跳过 */\n    if (this.initialized && !force) return\n\n    this.content = this.rawContent\n\n    const { width, height } = await this.measureSize()\n    this.width = width\n    this.height = height\n\n    this.initialized = true\n  }\n\n  async measureSize(): Promise<ISize> {\n    let titleSize = { width: 0, height: 0 }\n    if (this.haveTitle()) titleSize = this.measureTitleSize()\n\n    const { width, height } = await measureImgSize(this.rawContent)\n\n    return {\n      width: Math.max(titleSize.width, width),\n      height: titleSize.height + height\n    }\n  }\n\n  private haveTitle() {\n    return !!this.title\n  }\n\n  measureTitleSize() {\n    const fontDescObj = {\n      ...this.globalFontConfig,\n      lineHeight: `${this.globalFontConfig.lineHeight}px`\n    }\n    const { width } = measureTextMetrics(this.title, getCssFontDesc(fontDescObj))\n\n    return {\n      width,\n      height: this.globalFontConfig.lineHeight\n    }\n  }\n}\n"]}