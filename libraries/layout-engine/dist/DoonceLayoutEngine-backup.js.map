{"version":3,"file":"DoonceLayoutEngine-backup.js","sourceRoot":"","sources":["../src/DoonceLayoutEngine-backup.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author GuangHui\n * @description DoonceLayoutEngine 主体程序\n */\n\nimport { loadFont, checkCollision } from '@doonce/utils'\nimport {\n  Char,\n  Formula,\n  FormulaRenderTypeEnum,\n  Graph,\n  Img,\n  ImgPlaceholder,\n  ImgSurrounTypeEnum,\n  LayoutItemTypeEnum,\n  Row,\n  RowChild\n} from './layout-item'\n\nexport type GlobalFontOptions = {\n  fontSize: number /** 单位px */\n  fontFamily: string\n  lineHeight: number /** 单位px */\n  fontStyle: string\n  fontWeight: string\n  fontVariant: string\n  source: string\n}\n\nexport type InputLayoutItemDesc = {\n  layoutItemType: LayoutItemTypeEnum.CHAR | LayoutItemTypeEnum.FORMULA | LayoutItemTypeEnum.GRAPH\n  // | LayoutItemTypeEnum.TEXT_GROUP // ? 后期考虑\n  rawContent: string\n  imgSurroundType?: ImgSurrounTypeEnum\n}\n\nexport type DoonceLayoutEngineCtrOptions = {\n  globalFontOptions: GlobalFontOptions /** 字体 */\n  inputLayoutItemDescList: InputLayoutItemDesc[] /** 用户传入的布局项描述对象列表 */\n  formulaRenderType: FormulaRenderTypeEnum /** 公式渲染类型 */\n  debug?: boolean\n}\n\nexport type LayoutMethodParams = {\n  maxWidth: number /** 单位px */\n  padding?: [number, number, number, number] /** 上右下左 padding */\n  letterSpacing?: number /** 字符间距 */\n}\n\nexport class DoonceLayoutEngine {\n  globalFontOptions: GlobalFontOptions\n  font: FontFace = null as unknown as FontFace\n\n  /** 用户传入的布局项描述列表 */\n  inputLayoutItemDescList: InputLayoutItemDesc[]\n  /** 实例化后的用户布局项列表 */\n  inputLayoutItemInstanceList: (Char | Formula | Graph)[] = []\n\n  formulaRenderType: FormulaRenderTypeEnum\n\n  debug: boolean\n\n  constructor({\n    globalFontOptions,\n    inputLayoutItemDescList,\n    formulaRenderType,\n    debug\n  }: DoonceLayoutEngineCtrOptions) {\n    if (!globalFontOptions) throw new Error('globalFontOptions is required')\n    if (!inputLayoutItemDescList || !inputLayoutItemDescList.length)\n      throw new Error('layoutItemDescList is required')\n\n    this.globalFontOptions = globalFontOptions\n    this.inputLayoutItemDescList = inputLayoutItemDescList\n    this.formulaRenderType = formulaRenderType ?? FormulaRenderTypeEnum.IMG\n    this.debug = !!debug\n  }\n\n  async init() {\n    /** 字体不存在,则先加载 */\n    !this.font &&\n      (this.font = await loadFont(this.globalFontOptions.fontFamily, this.globalFontOptions.source))\n\n    /** 字体加载失败,阻塞流程 */\n    if (!this.isFontLoaded()) throw new Error(`font ${this.globalFontOptions.fontFamily} load faild`)\n\n    /** 实例化用户传入的布局项 */\n    this.inputLayoutItemInstanceList = this.instantiateInputLayoutItemDescList()\n\n    /** 等待实例初始化尺寸和 content结束 */\n    await Promise.all(this.inputLayoutItemInstanceList.map(instance => instance.init()))\n\n    this.debug && console.log('this.inputLayoutItemInstanceList :>> ', this.inputLayoutItemInstanceList)\n  }\n\n  private instantiateInputLayoutItemDescList() {\n    return this.inputLayoutItemDescList.map(({ layoutItemType, rawContent, imgSurroundType }) => {\n      if (layoutItemType === LayoutItemTypeEnum.FORMULA) {\n        return new Formula({\n          rawContent,\n          globalFontOptions: this.globalFontOptions,\n          formulaRenderType: this.formulaRenderType\n        })\n      } else if (layoutItemType === LayoutItemTypeEnum.GRAPH) {\n        return new Graph({ src: rawContent, imgSurroundType: imgSurroundType ?? ImgSurrounTypeEnum.NONE })\n      } else {\n        return new Char({ rawContent, globalFontOptions: this.globalFontOptions })\n      }\n    })\n  }\n\n  public layout({ maxWidth, padding = [0, 0, 0, 0], letterSpacing = 0 }: LayoutMethodParams) {\n    if (!maxWidth) throw new Error('layoutParams is required')\n\n    const imgOrGraphLayoutItemList = this.inputLayoutItemInstanceList.filter(\n      (instance): instance is Graph =>\n        [LayoutItemTypeEnum.GRAPH, LayoutItemTypeEnum.IMG].includes(\n          instance.layoutItemType\n        ) /** 此处还要考虑 img */\n    )\n\n    if (!imgOrGraphLayoutItemList || !imgOrGraphLayoutItemList.length) {\n      return this.layoutWithNoneImg({\n        maxWidth,\n        padding,\n        letterSpacing\n      })\n    } else {\n      return this.layoutWithImg({\n        imgOrGraph: imgOrGraphLayoutItemList[0] /** 暂只考虑只有一张图的场景 */,\n        maxWidth,\n        padding,\n        letterSpacing\n      })\n    }\n  }\n\n  private layoutWithImg({\n    imgOrGraph,\n    maxWidth,\n    padding,\n    letterSpacing\n  }: { imgOrGraph: Img | Graph } & LayoutMethodParams) {\n    let rowList: Row[] = []\n\n    /** 环绕 */\n    if (imgOrGraph.imgSurroundType === ImgSurrounTypeEnum.FLOAT) {\n      /** 调试用,模拟图片位置 */\n      imgOrGraph.x = 0\n      imgOrGraph.y = 0\n\n      const textLayoutItemList = this.inputLayoutItemInstanceList.filter(\n        (instance): instance is Char | Formula =>\n          ![LayoutItemTypeEnum.GRAPH, LayoutItemTypeEnum.IMG].includes(instance.layoutItemType)\n      )\n\n      /** 首行 */\n      let curRow = new Row({\n        globalFontOptions: this.globalFontOptions,\n        rowNo: 1\n      })\n      curRow.x = 0\n      curRow.y = 0\n      curRow.width = 0\n      curRow.height = this.globalFontOptions.lineHeight\n\n      /** 记录之前行,用来计算当前行 y 坐标 */\n      let prevRow: Row | null = null\n\n      for (let i = 0, curItem: Char | Formula; i < textLayoutItemList.length; i++) {\n        curItem = textLayoutItemList[i]\n\n        /** 传入字符位置尺寸信息 同图片做碰撞检测 */\n        const isCollision = checkCollision(\n          {\n            width: curItem.width,\n            height: curItem.height,\n            x: curRow.width + curItem.x,\n            y: prevRow ? prevRow.y + prevRow.height : 0 /** 首行,prevRow 为空 */\n          },\n          imgOrGraph\n        )\n        this.debug && isCollision && console.log('collision curItem is :>> ', curItem)\n\n        /** 碰撞则添加图片占位,并更新当前行宽度 */\n        if (isCollision) {\n          curRow.addChild(\n            new ImgPlaceholder({ owner: imgOrGraph, height: this.globalFontOptions.lineHeight })\n          )\n          curRow.width = imgOrGraph.x + imgOrGraph.width\n        }\n\n        if (\n          /** 超过容器宽度换行 */\n          curRow.width + curItem.width >\n          maxWidth\n        ) {\n          /** 加入行数组前更新当前行信息 */\n          this.updateCurRowInfo(curRow, prevRow)\n          /** 记录prevRow */\n          prevRow = curRow\n          /** 换行,将当前行塞入数组 */\n          rowList.push(curRow)\n\n          /** 创建新行 */\n          curRow = new Row({\n            globalFontOptions: this.globalFontOptions,\n            rowNo: curRow.rowNo + 1\n          })\n          /** 重置行宽和 x 坐标 */\n          curRow.width = 0\n          curRow.x = 0\n          curRow.height = this.globalFontOptions.lineHeight\n\n          /** 换行后,当前 item 的宽度大于图片左侧宽度,也需要绕开图片 */\n          if (curItem.width > imgOrGraph.x) {\n            curRow.addChild(\n              new ImgPlaceholder({ owner: imgOrGraph, height: this.globalFontOptions.lineHeight })\n            )\n            curRow.width = imgOrGraph.x + imgOrGraph.width\n          }\n        }\n\n        /** 更新当前 item 的 x 坐标 ,其为塞入当前 item 前的行宽 */\n        curItem.x = curRow.width // TODO 可能还需要加上 letterSpacing\n        /** 将当前 item 塞入当前行 */\n        curRow.addChild(curItem)\n        /** 更新当前行信息 */\n        curRow.width += curItem.width\n      }\n\n      /** 最后行 */\n      /** 加入行数组前更新当前行信息 */\n      this.updateCurRowInfo(curRow, prevRow)\n      /** 记录prevRow */\n      prevRow = curRow\n      /** 换行,将当前行塞入数组 */\n      rowList.push(curRow)\n    } else if (imgOrGraph.imgSurroundType === ImgSurrounTypeEnum.ABSOLUTE) {\n      /** 绝对定位 */\n      rowList = this.layoutWithNoneImg({ maxWidth, padding, letterSpacing })\n\n      /** 绝对定位,首次进入时,也按下挂坐标处理 */\n      imgOrGraph.x = maxWidth - imgOrGraph.width\n\n      const lastRow = rowList[rowList.length - 1]\n      imgOrGraph.y = lastRow.width + imgOrGraph.width <= maxWidth ? lastRow.y : lastRow.y + lastRow.height\n    } else {\n      /** 默认下挂(图片渲染在题干的右下) */\n      rowList = this.layoutWithNoneImg({ maxWidth, padding, letterSpacing })\n      imgOrGraph.x = maxWidth - imgOrGraph.width\n\n      const lastRow = rowList[rowList.length - 1]\n      imgOrGraph.y = lastRow.width + imgOrGraph.width <= maxWidth ? lastRow.y : lastRow.y + lastRow.height\n    }\n\n    return { rowList, imgList: [imgOrGraph] }\n  }\n\n  private layoutWithNoneImg({ maxWidth, padding, letterSpacing }: LayoutMethodParams) {\n    const textLayoutItemList = this.inputLayoutItemInstanceList.filter(\n      (instance): instance is Char | Formula =>\n        ![LayoutItemTypeEnum.GRAPH, LayoutItemTypeEnum.IMG].includes(instance.layoutItemType)\n    )\n\n    const rowList: Row[] = []\n\n    /** 首行 */\n    let curRow = new Row({\n      globalFontOptions: this.globalFontOptions,\n      rowNo: 1\n    })\n    curRow.x = 0\n\n    let prevRow: Row | null = null\n\n    for (let i = 0, curItem: Char | Formula; i < textLayoutItemList.length; i++) {\n      curItem = textLayoutItemList[i]\n\n      /** 超宽 */\n      if (curRow.width + curItem.width > maxWidth) {\n        /** 加入行数组前更新当前行信息 */\n        this.updateCurRowInfo(curRow, prevRow)\n        /** 记录prevRow */\n        prevRow = curRow\n        /** 换行,将当前行塞入数组 */\n        rowList.push(curRow)\n\n        /** 创建新行 */\n        curRow = new Row({\n          globalFontOptions: this.globalFontOptions,\n          rowNo: curRow.rowNo + 1\n        })\n        /** 重置行宽和 x 坐标 */\n        curRow.width = 0\n        curRow.x = 0\n      }\n\n      /** 更新当前 item 的 x 坐标 ,其为塞入当前 item 前的行宽 */\n      curItem.x = curRow.width // TODO 可能还需要加上 letterSpacing\n      /** 将当前 item 塞入当前行 */\n      curRow.addChild(curItem)\n      /** 更新当前行宽度 */\n      curRow.width += curItem.width\n    }\n\n    /** 最后行 */\n    this.updateCurRowInfo(curRow, prevRow)\n    prevRow = curRow\n    rowList.push(curRow)\n\n    return rowList\n  }\n\n  private updateCurRowInfo(curRow: Row, prevRow: Row | null) {\n    /** 更新当前行行高 */\n    // curRow.height = Math.max(this.globalFontOptions.lineHeight, this.getHighestRowChildHeight(curRow.childs))\n\n    /** 计算当前行 y 坐标,其依赖上一个行高计算后才能计算 */\n    curRow.y = prevRow ? prevRow.y + prevRow.height : 0\n\n    /** 水平居中行内item */\n    curRow.childs.forEach(child => {\n      child.y = Math.abs(curRow.height - child.height) / 2\n    })\n\n    return curRow\n  }\n\n  /**\n   * 获取最高 child 的高度\n   *\n   * @date 2023-07-21 16:43:37\n   * @private\n   * @param rowChild\n   * @returns {number} 高度\n   * @memberof DoonceLayoutEngine\n   */\n  private getHighestRowChildHeight(rowChild: RowChild[]): number {\n    return rowChild.reduce((acc, cur) => Math.max(cur.height, acc), 0)\n  }\n\n  /**\n   * 检查字体是否加载完成\n   * 参考:https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/check#fonts_that_have_loaded\n   * 使用document.fonts.check()存在误检测,参考:https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/check#nonexistent_fonts\n   *\n   * @date 2023-07-18 00:33:12\n   * @returns {boolean} 是否加载\n   * @memberof DoonceLayoutEngine\n   */\n  public isFontLoaded() {\n    return this.font.status === 'loaded'\n  }\n}\n"]}