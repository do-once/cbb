/**
 * This configuration file defines custom commands for the "rush" command-line.
 * More documentation is available on the Rush website: https://rushjs.io
 */
 /* 参考：https://rushjs.io/zh-cn/pages/configs/command-line_json/ */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/command-line.schema.json",

  /**
   * Custom "commands" introduce new verbs for the command-line.  To see the help for these
   * example commands, try "rush --help", "rush my-bulk-command --help", or
   * "rush my-global-command --help".
   */
  "commands": [
    // {
    //   /**
    //    * (Required) Determines the type of custom command.
    //    * Rush's "bulk" commands are invoked separately for each project.  Rush will look in
    //    * each project's package.json file for a "scripts" entry whose name matches the
    //    * command name.  By default, the command will run for every project in the repo,
    //    * according to the dependency graph (similar to how "rush build" works).
    //    * The set of projects can be restricted e.g. using the "--to" or "--from" parameters.
    //    */
    /**
       * （必须）用于确定自定义指令的类型。
       * Rush 的 "bulk" 类型指令将会在每个项目中都被调用，Rush 会寻找项目 package.json 内的 "scripts" 字段中匹配该命令行的字段。
       * 默认情况下，Rush 会根据依赖图来确定要运行的项目（与 "rush build" 的工作原理类似）。
       * 也可以通过诸如 "--to" 或 "--from" 参数来限制项目集合。
       * bulk类型命令是需要每个项目自行实现逻辑，自定义指令统一调用
       */
    //   "commandKind": "bulk",
    // 
    //   /**
    //    * (Required) The name that will be typed as part of the command line.  This is also the name
    //    * of the "scripts" hook in the project's package.json file.
    //    * The name should be comprised of lower case words separated by hyphens or colons. The name should include an
    //    * English verb (e.g. "deploy"). Use a hyphen to separate words (e.g. "upload-docs"). A group of related commands
    //    * can be prefixed with a colon (e.g. "docs:generate", "docs:deploy", "docs:serve", etc).
    //    *
    //    * Note that if the "rebuild" command is overridden here, it becomes separated from the "build" command
    //    * and will call the "rebuild" script instead of the "build" script.
    //    */
    //   "name": "my-bulk-command",
    // 
    //   /**
    //    * (Required) A short summary of the custom command to be shown when printing command line
    //    * help, e.g. "rush --help".
    //    */
    //   "summary": "Example bulk custom command",
    // 
    //   /**
    //    * A detailed description of the command to be shown when printing command line
    //    * help (e.g. "rush --help my-command").
    //    * If omitted, the "summary" text will be shown instead.
    //    *
    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //    * documentation can make a big difference for the developer experience in your repo.
    //    */
    //   "description": "This is an example custom command that runs separately for each project",
    // 
    //   /**
    //    * By default, Rush operations acquire a lock file which prevents multiple commands from executing simultaneously
    //    * in the same repo folder.  (For example, it would be a mistake to run "rush install" and "rush build" at the
    //    * same time.)  If your command makes sense to run concurrently with other operations,
    //    * set "safeForSimultaneousRushProcesses" to true to disable this protection.
    //    *
    //    * In particular, this is needed for custom scripts that invoke other Rush commands.
    //    */
    /**
    * Rush 操作需要一个锁文件来防止同一个仓库被多个指令同时处理。（例如：同时执行 "rush install" 和
    * "rush build" 会出错）。如果你的命令可以与其他操作同时执行，那么设定 "safeForSimultaneousRushProcesses"
    * 为 true 来禁用这种保护。
    *
    * 对于调用其他 Rush 命令的脚本而言，这一点是尤为需要的。
    */
    //   "safeForSimultaneousRushProcesses": false,
    // 
    //   /**
    //    * (Required) If true, then this command is safe to be run in parallel, i.e. executed
    //    * simultaneously for multiple projects.  Similar to "rush build", regardless of parallelism
    //    * projects will not start processing until their dependencies have completed processing.
    //    */
    /**
      * （必须）如果为真，那么该指令可以安全的并行执行，例如同时在多个项目内执行。
      * 与 "rush build" 类似，无论是否开启并行，在其依赖完成前，该项目都不会
      * 开始执行。
      */
    //   "enableParallelism": false,
    // 
    //   /**
    //    * Normally projects will be processed according to their dependency order: a given project will not start
    //    * processing the command until all of its dependencies have completed.  This restriction doesn't apply for
    //    * certain operations, for example a "clean" task that deletes output files.  In this case
    //    * you can set "ignoreDependencyOrder" to true to increase parallelism.
    //    */
    /**
    * 通常项目会依照依赖顺序处理，对于某个项目而言，直到其依赖处理完成后才会处理
    * 该项目。但对于某个特定的操作而言，该限制并不适用，例如 "clean" 任务来删除
    * 输出文件。在这种情况下，可以设定 "ignoreDependencyOrder" 为 true 来
    * 提高并行度。
    */
    //   "ignoreDependencyOrder": false,
    // 
    //   /**
    //    * Normally Rush requires that each project's package.json has a "scripts" entry matching
    //    * the custom command name.  To disable this check, set "ignoreMissingScript" to true;
    //    * projects with a missing definition will be skipped.
    //    */
    /**
    * 通常情况下，Rush 会要求每个项目的 package.jso 文件下都有对应的 "script"
    * 匹配自定义指令名。设定 "ignoreMissingScript" 为 true 可以禁止此检查，
    * 缺少相应定义的项目会被跳过。
    */
    //   "ignoreMissingScript": false,
    // 
    //   /**
    //    * When invoking shell scripts, Rush uses a heuristic to distinguish errors from warnings:
    //    * - If the shell script returns a nonzero process exit code, Rush interprets this as "one or more errors".
    //    * Error output is displayed in red, and it prevents Rush from attempting to process any downstream projects.
    //    * - If the shell script returns a zero process exit code but writes something to its stderr stream,
    //    * Rush interprets this as "one or more warnings". Warning output is printed in yellow, but does NOT prevent
    //    * Rush from processing downstream projects.
    //    *
    //    * Thus, warnings do not interfere with local development, but they will cause a CI job to fail, because
    //    * the Rush process itself returns a nonzero exit code if there are any warnings or errors. This is by design.
    //    * In an active monorepo, we've found that if you allow any warnings in your master branch, it inadvertently
    //    * teaches developers to ignore warnings, which quickly leads to a situation where so many "expected" warnings
    //    * have accumulated that warnings no longer serve any useful purpose.
    //    *
    //    * Sometimes a poorly behaved task will write output to stderr even though its operation was successful.
    //    * In that case, it's strongly recommended to fix the task.  However, as a workaround you can set
    //    * allowWarningsInSuccessfulBuild=true, which causes Rush to return a nonzero exit code for errors only.
    //    *
    //    * Note: The default value is false. In Rush 5.7.x and earlier, the default value was true.
    //    */
    /**
      * 构建时warning是否阻塞流程
      */
    //   "allowWarningsInSuccessfulBuild": false,
    // 
    //   /**
    //    * If true then this command will be incremental like the built-in "build" command
    //    */
    /**
      * 该参数为 true 时，其行为类似于内置的 "build" 命令的增量构建。
      */
    //   "incremental": false,
    // 
    //   /**
    //    * (EXPERIMENTAL) Normally Rush terminates after the command finishes. If this option is set to "true" Rush
    //    * will instead enter a loop where it watches the file system for changes to the selected projects. Whenever a
    //    * change is detected, the command will be invoked again for the changed project and any selected projects that
    //    * directly or indirectly depend on it.
    //    *
    //    * For details, refer to the website article "Using watch mode".
    //    */
    //   "watchForChanges": false,
    // 
    //   /**
    //    * (EXPERIMENTAL) Disable cache for this action. This may be useful if this command affects state outside of
    //    * projects' own folders.
    //    */
    //   "disableBuildCache": false
    // },
    // 
    // {
    //   /**
    //    * (Required) Determines the type of custom command.
    //    * Rush's "global" commands are invoked once for the entire repo.
    //    */
    /**
      * （必须）自定义指令的类型。
      * Rush 的 "global" 指令会在整个项目内唤醒一次。一般需要一个使用一个shell来处理，参考rush prettier这个自定义命令；* 参考https://rushjs.io/pages/maintainer/enabling_prettier/ 
      */
    //   "commandKind": "global",
    // 
    //   "name": "my-global-command",
    //   "summary": "Example global custom command",
    //   "description": "This is an example custom command that runs once for the entire repo",
    // 
    //   "safeForSimultaneousRushProcesses": false,
    // 
    //   /**
    //    * (Required) A script that will be invoked using the OS shell. The working directory will be
    //    * the folder that contains rush.json.  If custom parameters are associated with this command, their
    //    * values will be appended to the end of this string.
    //    */
  /**
    * （必须）一个使用操作系统 shell 调用的脚本。工作目录是含有 rush.json 的
    * 目录。如果自定义指令与该指令有关，那么它们的值应该被添加到字符串的尾部。
    */
    //   "shellCommand": "node common/scripts/my-global-command.js",
    // 
    //   /**
    //    * If your "shellCommand" script depends on NPM packages, the recommended best practice is
    //    * to make it into a regular Rush project that builds using your normal toolchain.  In cases where
    //    * the command needs to work without first having to run "rush build", the recommended practice
    //    * is to publish the project to an NPM registry and use common/scripts/install-run.js to launch it.
    //    *
    //    * Autoinstallers offer another possibility: They are folders under "common/autoinstallers" with
    //    * a package.json file and shrinkwrap file. Rush will automatically invoke the package manager to
    //    * install these dependencies before an associated command is invoked.  Autoinstallers have the
    //    * advantage that they work even in a branch where "rush install" is broken, which makes them a
    //    * good solution for Git hook scripts.  But they have the disadvantages of not being buildable
    //    * projects, and of increasing the overall installation footprint for your monorepo.
    //    *
    //    * The "autoinstallerName" setting must not contain a path and must be a valid NPM package name.
    //    * For example, the name "my-task" would map to "common/autoinstallers/my-task/package.json", and
    //    * the "common/autoinstallers/my-task/node_modules/.bin" folder would be added to the shell PATH when
    //    * invoking the "shellCommand".
    //    */
      /**
       * 如果你的 "shellCommand" 依赖 NPM 包，那么推荐将其写成 Rush 内的一
       * 个项目，使得工作链可以正常构建。某些情况下该指令应该在没有首次执行
       * "rush build" 的情况下正常工作，推荐的方式是将该项目发布到 NPM 源
       * 上，并使用 common/scripts/install-run.js 来调用它。
       *
       * 自动安装功能提供了另外一种可能：在 "common/autoinstallers" 下的目
       * 录都有一个 package.json 文件和 shrinkwrap 文件。在被调用前，Rush
       * 会自动调用包管理器来安装这些依赖。自动下载有一个优势：即使所在的分支的  Autoinstallers have the
       * "rush isntall" 出现了问题，它们也能正常工作，这使得该功能可以实现
       * Git 的钩子脚本。但是该功能也有一个缺点，它们不能用于构建项目，并且会增
       * 加仓库的安装量。
       *
       * "autoinstallerName" 属性不能包含路径，并必须是一个有效的 NPM 包名。
       * 例如， "my-task" 是映射到 "common/autoinstallers/my-task/package.json"
       * 的包名，当调用该 "shellCommand" 时，"common/autoinstallers/my-task/node_modules/.bin"
       * 应当被添加到环境变量中。
       */
    //   // "autoinstallerName": "my-task"
    // }
    {
      /* 开启pre-commit时自动prettier */
      /* 参考：https://rushjs.io/pages/maintainer/enabling_prettier/ */
      "name": "prettier",
      "commandKind": "global",
      "summary": "Used by the pre-commit Git hook. This command invokes Prettier to reformat staged changes.",
      "safeForSimultaneousRushProcesses": true,

      "autoinstallerName": "rush-prettier",

      // This will invoke common/autoinstallers/rush-prettier/node_modules/.bin/pretty-quick
      "shellCommand": "pretty-quick --staged"
    }
  ],

  /**
   * Custom "parameters" introduce new parameters for specified Rush command-line commands.
   * For example, you might define a "--production" parameter for the "rush build" command.
   */
  "parameters": [
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "flag" is a custom command-line parameter whose presence acts as an on/off switch.
    //    */
    //   "parameterKind": "flag",
    // 
    //   /**
    //    * (Required) The long name of the parameter.  It must be lower-case and use dash delimiters.
    //    */
    //   "longName": "--my-flag",
    // 
    //   /**
    //    * An optional alternative short name for the parameter.  It must be a dash followed by a single
    //    * lower-case or upper-case letter, which is case-sensitive.
    //    *
    //    * NOTE: The Rush developers recommend that automation scripts should always use the long name
    //    * to improve readability.  The short name is only intended as a convenience for humans.
    //    * The alphabet letters run out quickly, and are difficult to memorize, so *only* use
    //    * a short name if you expect the parameter to be needed very often in everyday operations.
    //    */
    //   "shortName": "-m",
    // 
    //   /**
    //    * (Required) A long description to be shown in the command-line help.
    //    *
    //    * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //    * documentation can make a big difference for the developer experience in your repo.
    //    */
    //   "description": "A custom flag parameter that is passed to the scripts that are invoked when building projects",
    // 
    //   /**
    //    * (Required) A list of custom commands and/or built-in Rush commands that this parameter may
    //    * be used with.  The parameter will be appended to the shell command that Rush invokes.
    //    */
    //   "associatedCommands": ["build", "rebuild"]
    // },
    // 
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "string" is a custom command-line parameter whose value is a simple text string.
    //    */
    //   "parameterKind": "string",
    //   "longName": "--my-string",
    //   "description": "A custom string parameter for the \"my-global-command\" custom command",
    // 
    //   "associatedCommands": ["my-global-command"],
    // 
    //   /**
    //    * The name of the argument, which will be shown in the command-line help.
    //    *
    //    * For example, if the parameter name is '--count" and the argument name is "NUMBER",
    //    * then the command-line help would display "--count NUMBER".  The argument name must
    //    * be comprised of upper-case letters, numbers, and underscores.  It should be kept short.
    //    */
    //   "argumentName": "SOME_TEXT",
    // 
    //   /**
    //    * If true, this parameter must be included with the command.  The default is false.
    //    */
    //   "required": false
    // },
    // 
    // {
    //   /**
    //    * (Required) Determines the type of custom parameter.
    //    * A "choice" is a custom command-line parameter whose argument must be chosen from a list of
    //    * allowable alternatives.
    //    */
    //   "parameterKind": "choice",
    //   "longName": "--my-choice",
    //   "description": "A custom choice parameter for the \"my-global-command\" custom command",
    // 
    //   "associatedCommands": ["my-global-command"],
    // 
    //   /**
    //    * If true, this parameter must be included with the command.  The default is false.
    //    */
    //   "required": false,
    // 
    //   /**
    //    * Normally if a parameter is omitted from the command line, it will not be passed
    //    * to the shell command. this value will be inserted by default.  Whereas if a "defaultValue"
    //    * is defined, the parameter will always be passed to the shell command, and will use the
    //    * default value if unspecified.  The value must be one of the defined alternatives.
    //    */
    //   "defaultValue": "vanilla",
    // 
    //   /**
    //    * (Required) A list of alternative argument values that can be chosen for this parameter.
    //    */
    //   "alternatives": [
    //     {
    //       /**
    //        * A token that is one of the alternatives that can be used with the choice parameter,
    //        * e.g. "vanilla" in "--flavor vanilla".
    //        */
    //       "name": "vanilla",
    // 
    //       /**
    //        * A detailed description for the alternative that can be shown in the command-line help.
    //        *
    //        * Whenever you introduce commands/parameters, taking a little time to write meaningful
    //        * documentation can make a big difference for the developer experience in your repo.
    //        */
    //       "description": "Use the vanilla flavor (the default)"
    //     },
    // 
    //     {
    //       "name": "chocolate",
    //       "description": "Use the chocolate flavor"
    //     },
    // 
    //     {
    //       "name": "strawberry",
    //       "description": "Use the strawberry flavor"
    //     }
    //   ]
    // }

   
  ]
}
